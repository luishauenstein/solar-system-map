import AstronomicalObject from '../astronomicalObject/AstronomicalObject';
import { RectangularCoordinates } from '../coordinates/coordinateTypes';
import { EclipticSphericalCoordinates } from '../coordinates/coordinateTypes';
import IPlanet from './interfaces/IPlanet';
import TimeOfInterest from '../time/TimeOfInterest';
import { Location } from '../earth/LocationTypes';
export default abstract class Planet extends AstronomicalObject implements IPlanet {
    protected useVsop87Short: boolean;
    private sun;
    private earth;
    constructor(toi?: TimeOfInterest, useVsop87Short?: boolean);
    getHeliocentricEclipticRectangularJ2000Coordinates(): Promise<RectangularCoordinates>;
    getHeliocentricEclipticRectangularDateCoordinates(): Promise<RectangularCoordinates>;
    abstract getHeliocentricEclipticSphericalJ2000Coordinates(): Promise<EclipticSphericalCoordinates>;
    abstract getHeliocentricEclipticSphericalDateCoordinates(): Promise<EclipticSphericalCoordinates>;
    getGeocentricEclipticRectangularJ2000Coordinates(): Promise<RectangularCoordinates>;
    getGeocentricEclipticRectangularDateCoordinates(): Promise<RectangularCoordinates>;
    getGeocentricEclipticSphericalJ2000Coordinates(): Promise<EclipticSphericalCoordinates>;
    getGeocentricEclipticSphericalDateCoordinates(): Promise<EclipticSphericalCoordinates>;
    getApparentGeocentricEclipticSphericalCoordinates(): Promise<EclipticSphericalCoordinates>;
    getTransit(location: Location): Promise<TimeOfInterest>;
    getRise(location: Location): Promise<TimeOfInterest>;
    getSet(location: Location): Promise<TimeOfInterest>;
    getElongation(): Promise<number>;
    getPhaseAngle(): Promise<number>;
    getIlluminatedFraction(): Promise<number>;
    getPositionAngleOfBrightLimb(): Promise<number>;
    isWaxing(): Promise<boolean>;
    private getLightTimeCorrectedEclipticSphericalCoordinates;
}
