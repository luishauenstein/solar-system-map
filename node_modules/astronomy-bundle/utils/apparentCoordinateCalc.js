"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.correctEffectOfRefraction = exports.correctEffectOfAberration = exports.correctEffectOfNutation = exports.getLightTimeCorrectedJulianDay = void 0;
var angleCalc_1 = require("./angleCalc");
var earthCalc_1 = require("./earthCalc");
var index_1 = require("./index");
function getLightTimeCorrectedJulianDay(jd, d) {
    var theta = 0.0057755183 * d;
    return jd - theta;
}
exports.getLightTimeCorrectedJulianDay = getLightTimeCorrectedJulianDay;
function correctEffectOfNutation(coords, T) {
    var phi = earthCalc_1.getNutationInLongitude(T);
    return {
        lon: coords.lon + phi,
        lat: coords.lat,
        radiusVector: coords.radiusVector,
    };
}
exports.correctEffectOfNutation = correctEffectOfNutation;
function correctEffectOfAberration(coords, T) {
    var lonSun = index_1.sunCalc.getTrueLongitude(T);
    var e = earthCalc_1.getEccentricity(T);
    var pi = earthCalc_1.getLongitudeOfPerihelionOfOrbit(T);
    var k = angleCalc_1.sec2deg(20.49552);
    var lonRad = angleCalc_1.deg2rad(coords.lon);
    var latRad = angleCalc_1.deg2rad(coords.lat);
    var lonSunRad = angleCalc_1.deg2rad(lonSun);
    var piRad = angleCalc_1.deg2rad(pi);
    var dLon = (-1 * k * Math.cos(lonSunRad - lonRad) + e * k * Math.cos(piRad - lonRad)) / Math.cos(latRad);
    var dLat = -1 * k * Math.sin(latRad) * (Math.sin(lonSunRad - lonRad) - e * Math.sin(piRad - lonRad));
    return {
        lon: coords.lon + dLon,
        lat: coords.lat + dLat,
        radiusVector: coords.radiusVector,
    };
}
exports.correctEffectOfAberration = correctEffectOfAberration;
function correctEffectOfRefraction(altitude) {
    if (altitude < -5) {
        return altitude;
    }
    var R = 1.02 / Math.tan(angleCalc_1.deg2rad(altitude + (10.3 / (altitude + 5.11))));
    return altitude + R / 60;
}
exports.correctEffectOfRefraction = correctEffectOfRefraction;
