"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSet = exports.getRise = exports.getTransit = void 0;
var time_1 = require("../time");
var timeCalc_1 = require("./timeCalc");
var interpolationCalc_1 = require("./interpolationCalc");
var angleCalc_1 = require("./angleCalc");
var coordinateCalc_1 = require("./coordinateCalc");
function getTransit(objConstructor, location, jd0) {
    return __awaiter(this, void 0, void 0, function () {
        var m0, dm, cnt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, _getApproximatedMTransit(objConstructor, location, jd0)];
                case 1:
                    m0 = _a.sent();
                    dm = 0;
                    cnt = 0;
                    _a.label = 2;
                case 2: return [4, _getCorrectionsTransit(objConstructor, location, jd0, m0)];
                case 3:
                    dm = _a.sent();
                    m0 += dm;
                    if (cnt++ > 100) {
                        throw new Error("While loop overflow. Astronomical object has no transit on given day " + jd0 + ".");
                    }
                    _a.label = 4;
                case 4:
                    if (Math.abs(dm) > 0.00001) return [3, 2];
                    _a.label = 5;
                case 5:
                    if (m0 < 0 || m0 >= 1) {
                        throw new Error("Astronomical object has no transit on given day " + jd0 + ".");
                    }
                    return [2, jd0 + m0];
            }
        });
    });
}
exports.getTransit = getTransit;
function getRise(objConstructor, location, jd0, h0) {
    return __awaiter(this, void 0, void 0, function () {
        var m0, mH, m1, dm, cnt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, _getApproximatedMTransit(objConstructor, location, jd0)];
                case 1:
                    m0 = _a.sent();
                    return [4, _getApproximatedMRiseSet(objConstructor, location, jd0, h0)];
                case 2:
                    mH = _a.sent();
                    if (isNaN(mH)) {
                        throw new Error("Astronomical object cannot rise on given day " + jd0 + ".");
                    }
                    m1 = angleCalc_1.normalizeAngle(m0 - mH, 1);
                    dm = 0;
                    cnt = 0;
                    _a.label = 3;
                case 3: return [4, _getCorrectionsRiseSet(objConstructor, location, jd0, h0, m1)];
                case 4:
                    dm = _a.sent();
                    m1 += dm;
                    if (cnt++ > 100) {
                        throw new Error("While loop overflow. Astronomical object cannot rise on given day " + jd0 + ".");
                    }
                    _a.label = 5;
                case 5:
                    if (Math.abs(dm) > 0.00001) return [3, 3];
                    _a.label = 6;
                case 6:
                    if (m1 < 0) {
                        throw new Error("Astronomical object cannot rise on given day " + jd0 + ". Rise happens the day before.");
                    }
                    if (m1 >= 1) {
                        throw new Error("Astronomical object cannot rise on given day " + jd0 + ". Rise happens the next day.");
                    }
                    return [2, jd0 + m1];
            }
        });
    });
}
exports.getRise = getRise;
function getSet(objConstructor, location, jd0, h0) {
    return __awaiter(this, void 0, void 0, function () {
        var m0, mH, m2, dm, cnt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, _getApproximatedMTransit(objConstructor, location, jd0)];
                case 1:
                    m0 = _a.sent();
                    return [4, _getApproximatedMRiseSet(objConstructor, location, jd0, h0)];
                case 2:
                    mH = _a.sent();
                    if (isNaN(mH)) {
                        throw new Error("Astronomical object cannot set on given day " + jd0 + ".");
                    }
                    m2 = angleCalc_1.normalizeAngle(m0 + mH, 1);
                    dm = 0;
                    cnt = 0;
                    _a.label = 3;
                case 3: return [4, _getCorrectionsRiseSet(objConstructor, location, jd0, h0, m2)];
                case 4:
                    dm = _a.sent();
                    m2 += dm;
                    if (cnt++ > 100) {
                        throw new Error("While loop overflow. Astronomical object cannot set on given day " + jd0 + ".");
                    }
                    _a.label = 5;
                case 5:
                    if (Math.abs(dm) > 0.00001) return [3, 3];
                    _a.label = 6;
                case 6:
                    if (m2 < 0) {
                        throw new Error("Astronomical object cannot set on given day " + jd0 + ". Set happens the day before.");
                    }
                    if (m2 >= 1) {
                        throw new Error("Astronomical object cannot set on given day " + jd0 + ". Set happens the next day.");
                    }
                    return [2, jd0 + m2];
            }
        });
    });
}
exports.getSet = getSet;
function _getApproximatedMTransit(objConstructor, location, jd0) {
    return __awaiter(this, void 0, void 0, function () {
        var object, rightAscension, T, GAST, m0;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    object = _createAstronomicalObject(objConstructor, jd0);
                    return [4, object.getApparentGeocentricEquatorialSphericalCoordinates()];
                case 1:
                    rightAscension = (_a.sent()).rightAscension;
                    T = timeCalc_1.julianDay2julianCenturiesJ2000(jd0);
                    GAST = timeCalc_1.getGreenwichApparentSiderealTime(T);
                    m0 = (rightAscension - location.lon - GAST) / 360;
                    return [2, angleCalc_1.normalizeAngle(m0, 1)];
            }
        });
    });
}
function _getApproximatedMRiseSet(objConstructor, location, jd0, h0) {
    return __awaiter(this, void 0, void 0, function () {
        var H0;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, _getH0(objConstructor, location, jd0, h0)];
                case 1:
                    H0 = _a.sent();
                    return [2, H0 / 360];
            }
        });
    });
}
function _getCorrectionsTransit(objConstructor, location, jd0, m) {
    return __awaiter(this, void 0, void 0, function () {
        var rightAscensionArray, n0, raInterpolated, H;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, interpolationCalc_1.getRightAscensionInterpolationArray(objConstructor, jd0, 1)];
                case 1:
                    rightAscensionArray = _a.sent();
                    n0 = _getN0(jd0, m);
                    raInterpolated = angleCalc_1.normalizeAngle(interpolationCalc_1.tabularInterpolation3(rightAscensionArray, n0));
                    H = _getLocalHourAngle(raInterpolated, location.lon, jd0, m);
                    return [2, -H / 360];
            }
        });
    });
}
function _getCorrectionsRiseSet(objConstructor, location, jd0, h0, m) {
    return __awaiter(this, void 0, void 0, function () {
        var lat, latRad, rightAscensionArray, declinationArray, n0, raInterpolated, decInterpolated, dRad, H, HRad, altitude;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    lat = location.lat;
                    latRad = angleCalc_1.deg2rad(lat);
                    return [4, interpolationCalc_1.getRightAscensionInterpolationArray(objConstructor, jd0, 1)];
                case 1:
                    rightAscensionArray = _a.sent();
                    return [4, interpolationCalc_1.getDeclinationInterpolationArray(objConstructor, jd0, 1)];
                case 2:
                    declinationArray = _a.sent();
                    n0 = _getN0(jd0, m);
                    raInterpolated = angleCalc_1.normalizeAngle(interpolationCalc_1.tabularInterpolation3(rightAscensionArray, n0));
                    decInterpolated = interpolationCalc_1.tabularInterpolation3(declinationArray, n0);
                    dRad = angleCalc_1.deg2rad(decInterpolated);
                    return [4, _getLocalHourAngle(raInterpolated, location.lon, jd0, m)];
                case 3:
                    H = _a.sent();
                    HRad = angleCalc_1.deg2rad(H);
                    altitude = coordinateCalc_1.equatorialSpherical2topocentricHorizontalByLocalHourAngle(H, decInterpolated, lat).altitude;
                    return [2, (altitude - h0) / (360 * Math.cos(dRad) * Math.cos(latRad) * Math.sin(HRad))];
            }
        });
    });
}
function _getLocalHourAngle(raInterpolated, longitude, jd0, m) {
    var T = timeCalc_1.julianDay2julianCenturiesJ2000(jd0);
    var GAST = timeCalc_1.getGreenwichApparentSiderealTime(T);
    var theta0 = GAST + 360.985647 * m;
    var H = theta0 + longitude - raInterpolated;
    return angleCalc_1.normalizeAngle(H + 180) - 180;
}
function _getH0(objConstructor, location, jd0, h0) {
    return __awaiter(this, void 0, void 0, function () {
        var object, declination, latRad, dRad, h0Rad, cosH0;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    object = _createAstronomicalObject(objConstructor, jd0);
                    return [4, object.getApparentGeocentricEquatorialSphericalCoordinates()];
                case 1:
                    declination = (_a.sent()).declination;
                    latRad = angleCalc_1.deg2rad(location.lat);
                    dRad = angleCalc_1.deg2rad(declination);
                    h0Rad = angleCalc_1.deg2rad(h0);
                    cosH0 = (Math.sin(h0Rad) - Math.sin(latRad) * Math.sin(dRad)) / (Math.cos(latRad) * Math.cos(dRad));
                    if (Math.abs(cosH0) > 1 && Math.abs(cosH0) <= 1.1) {
                        return [2, 0];
                    }
                    return [2, angleCalc_1.rad2deg(Math.acos(cosH0))];
            }
        });
    });
}
function _getN0(jd, m) {
    var _a = timeCalc_1.julianDay2time(jd), year = _a.year, month = _a.month;
    var dT = timeCalc_1.getDeltaT(year, month);
    return m + dT / 86400;
}
function _createAstronomicalObject(objConstructor, jd) {
    var toi = time_1.createTimeOfInterest.fromJulianDay(jd);
    return new objConstructor(toi);
}
