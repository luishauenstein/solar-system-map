"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAngularSeparation = exports.getAngularDiameter = exports.isWaxing = exports.getPositionAngleOfBrightLimb = exports.getIlluminatedFraction = exports.getPhaseAngle = exports.getElongation = void 0;
var angleCalc_1 = require("./angleCalc");
function getElongation(equCoordsObj, equCoordsSun) {
    var raObjRad = angleCalc_1.deg2rad(equCoordsObj.rightAscension);
    var dObjRad = angleCalc_1.deg2rad(equCoordsObj.declination);
    var raSunRad = angleCalc_1.deg2rad(equCoordsSun.rightAscension);
    var dSunRad = angleCalc_1.deg2rad(equCoordsSun.declination);
    var phiRad = Math.acos(Math.sin(dSunRad) * Math.sin(dObjRad) + Math.cos(dSunRad) * Math.cos(dObjRad) * Math.cos(raSunRad - raObjRad));
    return angleCalc_1.rad2deg(phiRad);
}
exports.getElongation = getElongation;
function getPhaseAngle(equCoordsObj, equCoordsSun) {
    var distObj = equCoordsObj.radiusVector;
    var distSun = equCoordsSun.radiusVector;
    var phi = getElongation(equCoordsObj, equCoordsSun);
    var phiRad = angleCalc_1.deg2rad(phi);
    var i = Math.atan2(distSun * Math.sin(phiRad), distObj - distSun * Math.cos(phiRad));
    return angleCalc_1.rad2deg(i);
}
exports.getPhaseAngle = getPhaseAngle;
function getIlluminatedFraction(phaseAngle) {
    var iRad = angleCalc_1.deg2rad(phaseAngle);
    return (1 + Math.cos(iRad)) / 2;
}
exports.getIlluminatedFraction = getIlluminatedFraction;
function getPositionAngleOfBrightLimb(equCoordsObj, equCoordsSun) {
    var raObjRad = angleCalc_1.deg2rad(equCoordsObj.rightAscension);
    var dObjRad = angleCalc_1.deg2rad(equCoordsObj.declination);
    var raSunRad = angleCalc_1.deg2rad(equCoordsSun.rightAscension);
    var dSunRad = angleCalc_1.deg2rad(equCoordsSun.declination);
    var numerator = Math.cos(dSunRad) * Math.sin(raSunRad - raObjRad);
    var denominator = Math.sin(dSunRad) * Math.cos(dObjRad)
        - Math.cos(dSunRad) * Math.sin(dObjRad) * Math.cos(raSunRad - raObjRad);
    var chiRad = Math.atan2(numerator, denominator);
    return angleCalc_1.normalizeAngle(angleCalc_1.rad2deg(chiRad));
}
exports.getPositionAngleOfBrightLimb = getPositionAngleOfBrightLimb;
function isWaxing(chi) {
    return chi >= 180;
}
exports.isWaxing = isWaxing;
function getAngularDiameter(distance, trueDiameter) {
    var delta = 2 * Math.atan2(trueDiameter, 2 * distance);
    return angleCalc_1.rad2deg(delta);
}
exports.getAngularDiameter = getAngularDiameter;
function getAngularSeparation(coords1, coords2) {
    var raRad1 = angleCalc_1.deg2rad(coords1.rightAscension);
    var dRad1 = angleCalc_1.deg2rad(coords1.declination);
    var raRad2 = angleCalc_1.deg2rad(coords2.rightAscension);
    var dRad2 = angleCalc_1.deg2rad(coords2.declination);
    var dRad = Math.acos(Math.sin(dRad1) * Math.sin(dRad2)
        + Math.cos(dRad1) * Math.cos(dRad2) * Math.cos(raRad1 - raRad2));
    return angleCalc_1.rad2deg(dRad);
}
exports.getAngularSeparation = getAngularSeparation;
